// Implements a palette with two main colors, --primary-color and --secondary-color

@use "sass:meta";
@use "sass:color";
@use "sass:map";
@use "colors/color-helpers" as colorHelpers;
@use "colors/color-vars" as color-vars;

$schemes: (
  "red-blue": (
    "primary-color": #932c1c,
    "secondary-color": #2a5ea4,
  ),
  "blue-red": (
    "primary-color": #2a5ea4,
    "secondary-color": #932c1c,
  ),
  "blue-green": (
    "primary-color": #2a5ea4,
    "secondary-color": #28803f,
  ),
  "green-blue": (
    "primary-color": #1a602d,
    "secondary-color": #2a5ea4,
  ),
  "gray-blue": (
    "primary-color": #3e3e3e,
    "secondary-color": #467dc5,
  ),
  "blue-gray": (
    "primary-color": #2a5ea4,
    "secondary-color": #636363,
  ),
  "greens": (
    "primary-color": #193e1c,
    "secondary-color": #347a3a,
  ),
  "brown-green": (
    "primary-color": #3a2e21, 
    "secondary-color": hsl(125, 30%, 34%),
  ), 
  "purples": (
    "primary-color": hsl(321, 40%, 20%),
    "secondary-color": hsl(321, 60%, 32%),
  ),
  "blues": (
    "primary-color": hsl(217, 70%, 20%),
    "secondary-color": hsl(216, 47%, 42%),
  ),
);

$color-scheme: 'red-blue' !default;

@if not map.has-key($schemes, $color-scheme) {
  @error "Unknown color scheme #{$color-scheme} for theme. Valid schemes are: #{map.keys($schemes)}";
}

// if primary-color or secondary-color are not set, use the scheme colors
$primary-color: null !default;
$secondary-color: null !default;

@if $primary-color == null {
  $scheme-primary-color: map.get(map.get($schemes, $color-scheme), "primary-color");
  $primary-color: $scheme-primary-color;
}
@if $secondary-color == null {
  $scheme-secondary-color: map.get(map.get($schemes, $color-scheme), "secondary-color");
  $secondary-color: $scheme-secondary-color;
}

// Start with values from color-vars
$colors: map.merge(
  color-vars.$colors, ()
);

// Compute color blends and add them as variables
$blends: colorHelpers.get-blends('primary-color');
$colors: map.merge(
  $colors,
  $blends
);
$blends: colorHelpers.get-blends('secondary-color');
$colors: map.merge(
  $colors,
  $blends
);

// Override some colors
$colors: map.merge(
  $colors,
  (
    "primary-color": $primary-color,
    "secondary-color": $secondary-color,

    "linkColor": var(--secondary-color),
    "linkActive": var(--secondary-color-black-20),
    "linkBackground": var(--secondary-color-white-97),

    "altLinkColor": var(--primary-color-black-10),
    "altLinkActive": var(--primary-color),
    "altLinkBackground": var(--primary-color-white-97),

    "tocborder": var(--primary-color-white-30),

    "toclevel1": var(--primary-color-black-10),
    "toclevel1-text": white,
    "toclevel2": var(--primary-color-white-10),
    "toclevel2-text": var(--toclevel1-text),


    "tocitem-highlight": var(--secondary-color-white-10),
    "tocitem-highlight-text": white,
    
    "tocitem-active": var(--secondary-color),
    "tocitem-active-text": white,

    "documenttitle": var(--primary-color),
    "bodytitle": var(--primary-color-black-5),
    
    "activated-content-bg": color.scale($secondary-color, $lightness: 90%),
    
    "goalborder": var(--secondary-color-white-20),
    
    "knowlbackground": var(--secondary-color-white-97),
    "knowlborder": var(--secondary-color-white-30),
    "knowlNested1Background": var(--primary-color-white-97),
    "knowlNested2Background": var(--secondary-color-white-97),
    "knowlNested3Background": var(--primary-color-white-97),
    "knowlNested4Background": var(--secondary-color-white-97),
  )
);