// Defines colors for grouping elements based on four colors
// Intended to be used as a supplement to a palette that handles non-grouping elements
// See theme-denver.scss for an example

@use 'sass:color';
@use 'sass:map';

$schemes: (
  "default": (
    "color-main": hsl(221, 63%, 31%),
    "color-do": hsl(205,54%,44%),
    "color-fact": hsl(182,75%,30%),
    "color-meta": hsl(341,48%,40%),
  ),
  "ice-fire": (
    "color-main": hsl(206, 31%, 52%),
    "color-do": hsl(206, 3%, 7%),
    "color-fact": #676d70,
    "color-meta": #bd2c49,
  ),
  "red-wine": (
    "color-main": #3b2144,
    "color-do": #6e1e51,
    "color-fact": #a11a5d,
    "color-meta": #5f0913,
  ),
  "earth-sea": (
    "color-main": #573d31,
    "color-do": #0f6385,
    "color-fact": #358292,
    "color-meta": #a77c65,
  ),
  "brick": (
    "color-main": #54423b,
    "color-do": #c2391d,
    "color-fact": #c25618,
    "color-meta": #ab2626,
  ),
  "pastels": (
    "color-main": #308bbf,
    "color-do": #f482e6,
    "color-fact": #cfe554,
    "color-meta": #fea671,
  ),
  "blue-gold": (
    "color-main": #175b91,
    "color-do": #40b0bf,
    "color-fact": #053363,
    "color-meta": #c08d2f,
  ),
  "forest": (
    "color-main": #314026,
    "color-do": #526a40,
    "color-fact": #739559,
    "color-meta": #7a5412,
  ),
  "autumn": (
    "color-main": #626454,
    "color-do": #8d5a39,
    "color-fact": #cd784d,
    "color-meta": #b34900,
  ),
  "leaves": (
    "color-main": #095e5e,
    "color-do": #557d6c,
    "color-fact": #a38d66,
    "color-meta": #c7522a,
  ),
  "bold1": (
    "color-main": hsl(221,63%,31%),
    "color-do": hsl(205,54%,44%),
    "color-fact": hsl(182,75%,30%),
    "color-meta": hsl(341,48%,40%),
  ),
  "bold2": (
    "color-main": hsl(221, 61%, 21%),
    "color-do": #51b39a,
    "color-fact": #9a51b3,
    "color-meta": #b3516a,
  ),
  "ocean": (
    "color-main": hsl(193, 52%, 20%),
    "color-do": hsl(192,59%,53%),
    "color-fact": hsl(172,60%,39%),
    "color-meta": hsl(27,87%,67%),
  ),
  "primary1": (
    "color-main": #007f4e,
    "color-do": #4353b0,
    "color-fact": #d1a908,
    "color-meta": #e12729,
  ),
  "primary2": (
    "color-main": #4353b0,
    "color-do": #d1a908,
    "color-fact": #007f4e,
    "color-meta": #e12729,
  ),
  "slate": (
    "color-main": #1e5067,
    "color-do": #159ab7,
    "color-fact": #5f7c86,
    "color-meta": #141e26,
  ),
);

$color-scheme: 'default' !default;

@if not map.has-key($schemes, $color-scheme) {
  @error "Unknown color scheme #{$color-scheme} in theme. Valid schemes are: #{map.keys($schemes)}";
}

// color-main is for basic groupings and knowls
$color-main: null !default;

// color-do is for examples and things for the reader to do
$color-do: null !default;

// color-fact is for statements of fact (definitions/theorems/etc...)
$color-fact: null !default;

// color-meta is for meta information for the reader (notes/objectives/etc...)
$color-meta: null !default;

// if a color is not set, use the scheme colors
@if $color-main == null {
  $scheme-color: map.get(map.get($schemes, $color-scheme), "color-main");
  $color-main: $scheme-color;
}
@if $color-do == null {
  $scheme-color: map.get(map.get($schemes, $color-scheme), "color-do");
  $color-do: $scheme-color;
}
@if $color-fact == null {
  $scheme-color: map.get(map.get($schemes, $color-scheme), "color-fact");
  $color-fact: $scheme-color;
}
@if $color-meta == null {
  $scheme-color: map.get(map.get($schemes, $color-scheme), "color-meta");
  $color-meta: $scheme-color;
}


// text color for headings
$heading-text-color: white !default;

$body-light: 99%;
$body-light-alt: 93%;
$body-sat: -20%;

//lighter version of color-main for knowl borders
$color-main-alt: color.adjust(color.scale($color-main, $lightness: 25%), $saturation: $body-sat);

//Make light versions of the 4 colors for backgrounds behind 
$color-main-light: color.adjust(color.change($color-main, $lightness: $body-light), $saturation: $body-sat);
$color-do-light: color.adjust(color.change($color-do, $lightness: $body-light), $saturation: $body-sat);
$color-fact-light: color.adjust(color.change($color-fact, $lightness: $body-light), $saturation: $body-sat);
$color-meta-light: color.adjust(color.change($color-meta, $lightness: $body-light), $saturation: $body-sat);
//and an alt of color-main for nested knowls
$color-main-light-alt: color.change($color-main, $lightness: $body-light-alt);

$colors: (
  "color-main": $color-main,
  "color-meta": $color-meta,
  "color-do": $color-do,
  "color-fact": $color-fact,

  // color-main
  "groupbody": $color-main-light,
  "groupborder": $color-main-alt,
  //"groupheadcolor": var(--page-color),
  "groupheadcolor": $heading-text-color,

  "assembbody": var(--groupbody),
  "assembborder": var(--groupborder),

  "knowlbackground": $color-main-light,
  "knowlborder": $color-main-alt,
  "knowlNested1Background": $color-main-light-alt,
  "knowlNested2Background": $color-main-light,
  "knowlNested3Background": $color-main-light-alt,
  "knowlNested4Background": $color-main-light,

  // color-do
  "projectbody": $color-do-light,
  "projectborder": $color-do,

  "investigatebody": var(--projectbody),
  "investigateborder": var(--projectborder),

  "solutionbody": var(--projectbody),
  "solutionborder": var(--projectborder),

  "examplebody": var(--projectbody),
  "exampleborder": var(--projectborder),

  "exercisebody": var(--groupbody),
  "exerciseborder": var(--projectborder),

  // color-fact
  "definitionbody": $color-fact-light,
  "definitionborder": $color-fact,

  "theorembody": var(--definitionbody),
  "theoremborder": var(--definitionborder),

  "proofbody": var(--definitionbody),
  "proofborder": var(--definitionborder),

  "computationbody": var(--groupbody),
  "computationborder": var(--groupborder),

  // color-meta
  "goalbody": $color-meta-light,
  "goalborder": $color-meta,

  "assidebody": var(--goalbody),
  "assideborder": var(--goalborder),

  "commentarybody": var(--goalbody),
  "commentaryboder": var(--goalborder),
  
  "remarkbody": var(--goalbody),
  "remarkborder": var(--goalborder),
);